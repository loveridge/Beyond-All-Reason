
#include "../recoil_common_includes.h"

//piece  base, door, turret, flare;
piece base, hingeA, hingeB, doorA, doorB, tracks, barrel, flare;//sleeveA, sleeveB, sleeveC, barrelA, barrelB, barrelC, flareA, flareB, flareC;

static-var  OpenedState, restore_delay, whichGun;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_IDLE 8


#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 6
#define MAXTILT 100
#define RECOIL_POWER 100000
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <11.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	// hide flareA;
	// hide flareB;
	// hide flareC;
	hide flare;
	whichGun = 0;
	OpenedState = 0;
	restore_delay = 3000;
	set ARMORED to 0;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	if (OpenedState){
		OpenedState = 0;
		set ARMORED to 0;


		// move barrelC to y-axis [0] speed [24];
		// move sleeveC to y-axis [0] speed [24];
		// sleep 50;
		// move barrelB to y-axis [0] speed [24];
		// move sleeveB to y-axis [0] speed [24];
		// sleep 50;
		// move barrelA to y-axis [0] speed [24];
		// move sleeveA to y-axis [0] speed [24];
		// wait-for-move barrelA along y-axis;

		turn barrel to x-axis <0> speed <90>;
		wait-for-turn barrel around x-axis;

		move doorB to x-axis [0] speed [4];
		move doorA to x-axis [0] speed [4];
		wait-for-move doorB along x-axis;
		turn hingeB to z-axis <0> speed <60>;
		turn hingeA to z-axis <0> speed <60>;
		wait-for-turn hingeB around z-axis;
		move doorB to x-axis [0] speed [7];
		move doorA to x-axis [0] speed [7];
		wait-for-move doorB along x-axis;
		move doorB to y-axis [0] speed [1];
		move doorA to y-axis [0] speed [1];

		// turn turret to y-axis <0> speed <90>;
		// wait-for-turn turret around y-axis;
		// turn door to z-axis <0> speed <90>;
		// wait-for-turn door around z-axis;
	}
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	if (!OpenedState){
		set ARMORED to 1;
		move doorA to y-axis [1] speed [4];
		move doorB to y-axis [1] speed [4];
		wait-for-move doorB along y-axis;
		move doorA to x-axis [11] speed [20];
		move doorB to x-axis [-11] speed [20];
		wait-for-move doorB along x-axis;
		turn hingeA to z-axis <-60> speed <120>;
		turn hingeB to z-axis <60> speed <120>;
		wait-for-turn hingeB around z-axis;

		turn barrel to x-axis <-90> speed <180>;
		wait-for-turn barrel around x-axis;
		//move doorA to x-axis [-4] now; //speed [16];
		//move doorB to x-axis [4] now; //speed [16];
		//wait-for-move doorB along x-axis;

		// move sleeveA to y-axis [12] speed [24];
		// move barrelA to y-axis [14] speed [24];
		// sleep 50;
		// move sleeveB to y-axis [12] speed [24];
		// move barrelB to y-axis [14] speed [24];
		// sleep 50;
		// move sleeveC to y-axis [12] speed [24];
		// move barrelC to y-axis [14] speed [24];
		// wait-for-move barrelC along y-axis;

		// turn door to z-axis <90> speed <90>;
		// wait-for-turn door around z-axis;
		// turn turret to y-axis <-90> speed <90>;
		// wait-for-turn turret around y-axis;
	}
	OpenedState = 1;

	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	// if (whichGun == 0){
	// 	emit-sfx 1024 + 0 from flareA;
	// 	//sleep 100;
	// 	//whichGun = 1;
	// }
	// if (whichGun == 1){
	// 	emit-sfx 1024 + 0 from flareB;
	// 	//sleep 100;
	// 	//whichGun = 2;
	// }
	// if (whichGun == 2){
	// 	emit-sfx 1024 + 0 from flareC;
	// 	//sleep 100;
	// 	//whichGun = 0;s
	// }
	// ++whichgun;
	// if(whichgun >= 3){
	// 	whichgun = 0;
	// }
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	// if (whichGun == 0){
	// 	pieceIndex = flareA;
	// }
	// if (whichGun == 1){
	// 	pieceIndex = flareB;
	// }
	// if (whichGun == 2){
	// 	pieceIndex = flareC;
	// }
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorA type BITMAPONLY | NOHEATCLOUD;
		explode doorB type BITMAPONLY | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		// explode barrelA type BITMAPONLY | NOHEATCLOUD;
		// explode flareA type BITMAPONLY | NOHEATCLOUD;
		// explode barrelB type BITMAPONLY | NOHEATCLOUD;
		// explode flareC type BITMAPONLY | NOHEATCLOUD;
		// explode barrelB type BITMAPONLY | NOHEATCLOUD;
		// explode flareC type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorB type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode flareA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelB type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode flareC type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelB type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode flareC type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorB type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelA type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		// explode flareA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelB type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		// explode flareC type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelB type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		// explode flareC type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorA type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode doorB type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode flareA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode flareC type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode flareC type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
